generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  data      Json
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  authorId  String     @map("author_id") @db.Uuid
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  published Boolean    @default(false)
  baseId    String?    @map("base_id") @db.Uuid
  base      Document?  @relation("BaseForks", fields: [baseId], references: [id])
  forks     Document[] @relation("BaseForks")

  @@map("documents")
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  handle        String?     @unique
  name          String
  email         String     @unique
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  disabled      Boolean    @default(false)
  emailVerified DateTime?
  image         String?
  role          String     @default("user")
  documents     Document[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @map("user_id") @db.Uuid
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
